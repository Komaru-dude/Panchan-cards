import os, json, random
from aiogram import Router, types
from aiogram.types import FSInputFile
from aiogram.filters import Command
from datetime import datetime, timedelta
from bot import db

base_router = Router()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CARDS_JSON_PATH = os.path.join(os.path.dirname(__file__), '..', 'media', 'cards_info.json')
TRIGGER_PHRASES_PATH = os.path.join(os.path.dirname(__file__), '..', 'media', 'trigger_phrases.txt')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
def load_cards():
    try:
        with open(CARDS_JSON_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª {CARDS_JSON_PATH}")
    except json.JSONDecodeError:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –≤ {CARDS_JSON_PATH}")

cards_data = load_cards()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑
def load_trigger_phrases():
    try:
        with open(TRIGGER_PHRASES_PATH, 'r', encoding='utf-8') as file:
            return {line.strip().lower() for line in file if line.strip()}
    except FileNotFoundError:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª {TRIGGER_PHRASES_PATH}")

trigger_phrases = load_trigger_phrases()

# –®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
RARITY_PROBABILITIES = {
    "common": 50,
    "rare": 25,
    "epic": 15,
    "mythic": 8,
    "legendary": 2
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º
def get_random_card():
    rarities = list(RARITY_PROBABILITIES.keys())
    weights = list(RARITY_PROBABILITIES.values())
    selected_rarity = random.choices(rarities, weights, k=1)[0]

    available_cards = [card for card in cards_data if card['rarity'] == selected_rarity]
    if not available_cards:
        raise RuntimeError(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏ {selected_rarity}")
    return random.choice(available_cards)

def can_receive_card(user_id):
    next_drop = db.get_next_drop_time(user_id)
    if not next_drop:
        return True

    next_drop_time = next_drop[0] if isinstance(next_drop, tuple) else next_drop

    try:
        last_drop_time = datetime.strptime(next_drop_time, '%Y-%m-%d %H:%M:%S')
    except ValueError:
        raise RuntimeError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥—Ä–æ–ø–∞: {next_drop_time}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 12 —á–∞—Å–æ–≤
    if datetime.now() - last_drop_time >= timedelta(hours=12):
        return True
    else:
        return False

@base_router.message(Command("start"))
async def cmd_start(message: types.Message):
    first_name = message.from_user.first_name
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç {first_name},\n\n"
                        f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º–æ–º —Ö–æ–∑—è–π–∫–∏: https://www.instagram.com/tansoku_love/\n"
                        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ \"–∫–∞—á–∞–Ω\", \"–ø–∞–Ω—á–∞–Ω\", \"–¥–∞–π –∫–∞—Ä—Ç—É\" –∏–ª–∏ /get_card\n\n"
                        "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ @komaru_dude\n"
                        "–ì–∏—Ç—Ö–∞–±: https://github.com/Komaru-dude/Panchan-cards")
    
@base_router.message(Command("get_card"))
async def cmd_get_card(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    if not db.user_exists(user_id):
        db.add_user(user_id, username, first_name=first_name)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_rank = db.get_data(user_id, field="rank")
    if user_rank == "–ó–∞–±–∞–Ω–µ–Ω":
        user_banned = True
    else:
        user_banned = False
    if user_banned:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
    if not can_receive_card(user_id):
        await message.reply("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        return

    # –í—ã–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    try:
        card = get_random_card()
    except RuntimeError as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")
        return

    drop_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    db.add_card(user_id, card['id'], drop_time)
    next_drop_time = datetime.now() + timedelta(hours=12)
    db.set_data(user_id, "next_card_time", next_drop_time.strftime('%Y-%m-%d %H:%M:%S'))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    card_image_path = os.path.join(os.path.dirname(__file__), '..', 'media', 'cards', card['picture_name'])
    if not os.path.exists(card_image_path):
        await message.reply(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {card['picture_name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    photo = FSInputFile(card_image_path)
    await message.reply_photo(photo, caption=f"üí™ –£ –≤–∞—Å –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: \n\n"
                                             f"üë§ –ò–º—è: {card['name']}\n"
                                             f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity'].capitalize()}")